// {{name}} enum
//
// The Rust enum type {{name}} is represented in Go with an interfact
// this allows us to mimic the sum type by accepting any variant
// of {{name}} as a possibility for {{name}}.
//
// To make this clear, we prefix all variants with {{name}}
//
// The downside of this approach is that you cannot directly
// serialize or deserialize instances of {{name}}. Instead, you
// _must_ call Deserialize{{name}}.
type {{name}} interface {
    is{{name}}()
}

type {{name}}Deserializer struct {
   {{name}}
}

func Deserialize{{name}}(b []byte) (*{{name}}, error) {
    var deserializer {{name}}Deserializer
    var result {{name}}
    err := json.Unmarshal(b, &deserializer)
    if err != nil {
        return nil, err
    }
    result = deserializer.{{name}}
    return &result, nil
}

func (result *{{name}}Deserializer) UnmarshalJSON(b []byte) error {
    var variantName string
    var variantValue *json.RawMessage

    // try and deserialize as a string first
    err := json.Unmarshal(b, &variantName)
    if err != nil { 
        var rawMap map[string]json.RawMessage
        err := json.Unmarshal(b, &rawMap)
        if err != nil {
            return err
        }
         // JSON should be of form {"VariantName": {...}}
        if len(rawMap) != 1 {
            return errors.New("deserializing {{name}} as an enum variant; expecting a single key")
        }
        for k, v := range rawMap {
            variantName = k
            variantValue = &v
        }
    }

    switch variantName {
    {{#each variants}}
    case "{{this.name}}":
        var variant {{../name}}{{this.name}}
        if variantValue != nil {
            err := json.Unmarshal(*variantValue, &variant);
            if err != nil {
                return err
            }
        }

        *result = {{../name}}Deserializer { variant }
        return nil
    {{/each}}
    }

    return fmt.Errorf("cannot deserialize {{../name}}: %s", string(b))
}

func (v {{name}}Deserializer) MarshalJSON() ([]byte, error) {
    return Serialize{{name}}(v.{{name}})
}

func Serialize{{name}}(variant {{name}} ) ([]byte, error) {
    switch inner := variant.(type) {
    {{#each variants}}
    case {{../name}}{{this.name}}:
        {{#if (eq this.variant "UNIT")}}
        return json.Marshal("{{this.name}}")
        {{else}}
        return json.Marshal(map[string]{{../name}}{{this.name}} {
            "{{this.name}}": inner,
        });
        {{/if}}
    {{/each}}
    default:
        return nil, fmt.Errorf("unexpected variant %#v of %v", inner, variant)
    }

}
